name: CMake multiplatform ci

on:
  push: #remove if you don't want to trigger the workflow on push
    branches: [ "main", "gtest" ] #remove gtest after merging into main
  pull_request:
    branches: [ "main", "gtest" ] #remove gtest after merging into main
  workflow_dispatch:  #(added from github template) allow manual triggering of the workflow

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] 
        build_type: [Release]
        #c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        else
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Print test log on failure
      if: failure()
      shell: bash  # Force bash so `if [[ ... ]]` works
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Running on Windows"
          cat "${{ steps.strings.outputs.build-output-dir }}\\Testing\\Temporary\\LastTest.log" || echo "Log file not found"
        else
          echo "Running on $RUNNER_OS"
          cat "${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log" || echo "Log file not found"
        fi
