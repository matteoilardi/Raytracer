# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake multiplatform linter #choose the name you like

on:
  push: #remove if you don't want to trigger the workflow on push
    branches: [ "main", "gtest" ] #remove gtest after merging into main
  pull_request:
    branches: [ "main", "gtest" ] #remove gtest after merging into main
  workflow_dispatch:  #(added from github template) allow manual triggering of the workflow

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest] # I removed windows since the workflow was failing on windows, but will add it back later
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            shell: bash
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            shell: bash
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            shell: cmd
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSVC (Windows only)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: ${{ matrix.shell }}
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: ${{ matrix.shell }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      shell: ${{ matrix.shell }}
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      shell: ${{ matrix.shell }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Print test log on failure (Linux)
      if: failure() && runner.os == 'Linux'
      shell: bash
      run: cat ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log || true

    - name: Print test log on failure (Windows)
      if: failure() && runner.os == 'Windows'
      shell: cmd
      run: type ${{ steps.strings.outputs.build-output-dir }}\Testing\Temporary\LastTest.log || exit 0
